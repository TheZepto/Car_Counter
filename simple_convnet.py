'''Train a simple deep CNN on the car counting dataset.
'''

from __future__ import print_function
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import CSVLogger

from sklearn.metrics import confusion_matrix
from plot_library import save_confusion_matrix
import numpy as np

data_augmentation = False
batch_size = 32
num_classes = 2
epochs = 100
classes = ['Not Car', 'Car']

# The data, shuffled and split between train and test sets:
x_train = np.load('data/X_train.npy')
y_train = np.load('data/Y_train.npy')
x_test = np.load('data/X_test.npy')
y_test1 = np.load('data/Y_test.npy')
print('x_train type:', type(x_train))
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
print(np.sum(y_train)/y_train.shape[0], 'ratio of positive to negative')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test1, num_classes)

model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same',
								 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
							optimizer=opt,
							metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

if not data_augmentation:
	print('Not using data augmentation.')
	for i in range(epochs):
		model.fit(x_train, y_train,
				  batch_size=batch_size,
				  epochs=1,
				  validation_data=(x_test, y_test),
				  shuffle=True)
		
		y_hat = np.argmax(model.predict(x_test), axis=1)
		ConfMatrix = confusion_matrix(y_test1, y_hat)
		save_confusion_matrix(cm= ConfMatrix,
								classes= classes,
								index= i)
else:
	print('Using real-time data augmentation.')
	# This will do preprocessing and realtime data augmentation:
	datagen = ImageDataGenerator(
		featurewise_center=False,  # set input mean to 0 over the dataset
		samplewise_center=False,  # set each sample mean to 0
		featurewise_std_normalization=False,  # divide inputs by std of the dataset
		samplewise_std_normalization=False,  # divide each input by its std
		zca_whitening=False,  # apply ZCA whitening
		rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
		width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
		height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
		horizontal_flip=True,  # randomly flip images
		vertical_flip=False)  # randomly flip images

	# Compute quantities required for feature-wise normalization
	# (std, mean, and principal components if ZCA whitening is applied).
	datagen.fit(x_train)

	# Fit the model on the batches generated by datagen.flow().
	model.fit_generator(datagen.flow(x_train, y_train,
									 batch_size=batch_size),
						steps_per_epoch=x_train.shape[0] // batch_size,
						epochs=epochs,
						validation_data=(x_test, y_test))	